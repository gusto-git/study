
public class VMain1 {
	public static void main(String[] args) {
		// 컴퓨터의 장치
		// CPU / RAM / HDD / GPU 
		
		// CPU : 연산장치(Intel : i5-xx, i7-xx / AMD : RyzenX) - 뇌
		// HDD(SSD) : 파일 형태로 저장(장치) - 영구저장
		// RAM : 변수 형태로 저장(장치) - 임시저장
		// GPU : 그래픽 처리용(CPU + RAM + HDD)
		
		// HDD : 데이터를 영구 보존 - HDD에 파일로 저장
		// RAM : 데이터를 임시 보존 - RAM에 변수로 저장
		// 		 ㄴ 그래서 [변수]가 뭔데? 
		
		// syso로 글자나 숫자 출력 - 1회성(휘발용) -> 재사용이 안됨
		// 변수(Variable) : 변하는 수 / 데이터를 저장하는 공간(그릇)
		// 변수를 [왜] 사용하냐? XXXX
		// 변수를 [언제] 사용하냐? OOOO
		
		// 변수 문법 
		// 	1. 변수 선언(만들기) : RAM에 공간을 확보해서 데이터를 담는 공간을 만든다
		//	ㄴ (자료형 변수명;)의 형태를 변수를 '선언'했다라고 표현
		//	ㄴ (그릇종류 그릇이름;)의 형태로 이해가능 
		
//		int a; // 그릇종류 그릇이름, 정수(int)를 담을 그릇 a(아무거나 가능) 
//		String s ; // 그릇종류 그릇이름, 문자열(String)을 담을 그릇 s(아무거나 가능)
		
		// 	자료형 : 변수가 어떤값으로 저장이 될 지 그 형태를 정하는것
		// 	ㄴ int, double, String 등이 있음
		// 	변수명 : 말 그대로 변수의 이름(규칙만 지키면 상관없음 ex)a,b,ab 등등)
		
		//	2. 변수 초기화
		//	ㄴ 변수에 값을 넣어주어야 한다
		//	ㄴ (변수명 = 값;)의 형태로 표현 
		
		int aaaa; // 변수선언
		aaaa = 100; // 변수 초기화
		
		// 변수 선언 + 변수 초기화를 동시에 하는 것도 가능
		String s= "컴퓨터"; //s라는 글자에 컴퓨터 라는 단어를 임시적으로 저장한것 
		int a =  1; // int라는 자료형 그릇 a에 1이라는 데이터를 저장
		//		-> 이 형태를 [변수를 만든다]
	
		// <변수명 짓는 규칙> Must 규칙임
		//		1. 변수명에 숫자로 시작하면 에러
		int i = 3; //가능
//		int 10 = 3; // 에러
		int i10 = 3; // 가능
		
		// 		2. 특수문자, 띄어쓰기가 들어가면 에러
		String st = "안녕";
//		String st★ = "하이"; 에러
//		String s t = "띄어쓰기"; 에러
		
		
		// 		3. 자바문법(예약어) 사용하면 에러 - 자바에서 쓰는 예약어 쓰면 안됨(int, class)
//		int int = 10; 에러
//		int class = 20; 에러 , _class는 가능하긴 함 
		int _class = 30; // 가능
		
		// Java 문화)
		// 		4. 변수명은 보면 알 수 있게 작성 
		int skdnwkdf = 100; // 이런식으로 알기 어렵다
		int age = 101; // 표현하고자 하는걸 명확하게 나타내는걸 쓰기 좋다
		int mysistershusbandsbrothersage = 31; // 사용은 가능하나 가독성이 떨어진다
		
		//		5. 가독성을 위해(띄어쓰기가 필요한 경우)
		//		5-1 뱀체
		int mysisters_husbands_brothers_age = 31; //_을 활용하여 구분한다
		//		5-2 낙타체
		int mySistersHusbandsBrothersAge = 120; // 띄어쓰기 대신 첫글자를 대문자로 쓴다.
		
		// ex) 컴퓨터 이름
		String computer_name = "내컴퓨터"; //뱀체
		String computerName = "나의 컴퓨터"; //낙타체 오라클에서는 의미가 없다 뱀체를 자유롭게 쓰는게 좋다
		// 		6. 변수명에 한글은 사용할 수 없다. 
		
		// 변수를 만들때 사용하는 "="
		// = <- 대입연산자
		// A = B 
	    //		현실 ) A는 B와 같다
		//		프로그래밍 전반 ) A에 B를 넣어라(좌항에 우항을 대입하라)
		
		// 자료형 
		//		Bit : 비트, 데이터를 나타내는 최소 단위
		//			ㄴ Binary Digit(이진수)의 줄인말
		//			ㄴ 모든 데이터가 0, 1의 조합으로 구성
		//			ㄴ 이때 0,1의 값이 하나의 Bit가 됨
		
		//      기본형
		//			정수
		//				byte  : -128 ~ 127
		//				short : 약 -3만 ~ 3만
		//				int(v): 약 -21억 ~ 21억(가장 많이씀)
		//				long  : int의 범위를 벗어 나는 범위
		
		//			실수
		//				float 
		//				double(v) 
		//				* 다른언어 : float / Java : double 
		double d = 3.14;
	
		//			문자
		//				char
		//			논리
		//				boolean(불린) : 참 / 거짓 (true / false)
		//			없음
		//				void : '없음'
		
		//		참조형
		//			기본형이 아닌 것들은 전부다 참조형
		//			문자열
		//				String : 꼭 앞에 대문자 S를 사용해야한다 (오류난다)
		
		// 6층 >> 변수 선언 > 변수 초기화
		
		int floor;
		floor = 6;
		
		// 손가락이 10개
		int fingers;
		fingers = 10;
		
		// char vs String 차이
		// char는 쓸일이 적다 
		char c = 'ㅋ'; // 한 글자를 담고, '' 작은 따옴표 사용
		String s1 = "ㅋㅋㅋㅋㅋ"; // 여러 글자를 담고, "" 큰 따옴표를 사용
		
		// 변수선언 + 초기화 동시에
		// 버스 : 버스노선, 지하철 : 지하철 호선
		// 지하철 9호선, 버스 123번
		
		int subway = 9;
		double subway2 = 9; // 변수명은 중복 불가!
		// 넓게 보면 9 = 9.0으로 표현 가능하기 때문에 정수는 실수형(double)으로 사용할 수 있다. 
		
		String bus = "123-1";
		
		System.out.println(subway); // 변수가 선언되어 있는 경우 ""없이 그냥 사용하면 해당 값(변수 값)이 출력된다.
		System.out.println("subway"); // 따옴표 안에 있으면 글자 그대로 인식
		
		int num = 10;
		System.out.println(num); // 10
		num = 5; // 이미 선언된 변수명으로 자료형 없이 사용하면 값이 수정된다.
		System.out.println(num); // 5 
		
		// 변수끼리 연산 가능
		
		System.out.println(subway + num); //subway = 9(변수값) + num = 5(변수값)
		
		// RAM 메모리 영역 
		// 		???
		//		Stack
		//			프로그램이 종료되면 자동으로 정리
		//			밑에서부터 차곡차곡 쌓임(기본형)
		
		//		Heap
		//			프로그램이 종료되어도 여전히 남아 있음(수동정리 필요)
		//			컴퓨터가 적당하다고 판단되는 곳에 임의로 만들어버림(번지수, 주소)
		
		// 수동정리** (손으로 일일이 지우라는 건 아님)
		// Java에는 Heap 영역을 자동으로 정리해주는 시스템
		//			ㄴ Garbage Collection (자바로 증명은 못함, 파이썬으로 증명가능)
		
		
		
		
	}
}
